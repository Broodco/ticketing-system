// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Ticket {
  id         String        @id @default(cuid())
  title      String
  content    String?
  points     Int?
  published  Boolean       @default(false)
  createdAt  DateTime      @default(now()) @map(name: "created_at")
  updatedAt  DateTime      @updatedAt @map(name: "updated_at")
  author     User?         @relation("TicketAuthor", fields: [authorId], references: [id])
  authorId   String?
  assignee   User?         @relation("TicketAssignee", fields: [assigneeId], references: [id])
  assigneeId String?
  sprint     Sprint?       @relation(fields: [sprintId], references: [id])
  sprintId   String?
  status     TicketStatus? @relation(fields: [statusId], references: [id])
  statusId   Int?
}

model TicketStatus {
  id      Int      @id @default(autoincrement())
  name    String
  tickets Ticket[]
}

model Sprint {
  id        String   @id @default(cuid())
  name      String
  startDate DateTime @default(now()) @map(name: "start_date")
  endDate   DateTime
  active    Boolean  @default(false)
  tickets   Ticket[]
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime? @map("email_verified")
  image           String?
  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @updatedAt @map(name: "updated_at")
  writtenTickets  Ticket[]  @relation("TicketAuthor")
  assignedTickets Ticket[]  @relation("TicketAssignee")
  accounts        Account[]
  sessions        Session[]

  @@map(name: "users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
